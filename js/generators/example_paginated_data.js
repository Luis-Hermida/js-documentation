/*
    Paginated Data

    There are many online services that deliver paginated data. For instance, when we need a list of
    users, a request returns a pre-defined count (e.g. 100 users) – “one page”, and provides a URL
    to the next page.

    Let’s make a function fetchCommits(repo) that gets commits for us, making requests
    whenever needed. And let it care about all pagination stuff. For us it’ll be a simple async iteration
    for await..of

    1. We use the browser 'fetch' method to download the commits
        -   The initial URL is 'https://api.github.com/repos/<repo>/commits', and the next
            page will be in the 'Link' header of the response.
        -   The 'fetch' method allow us to supply authorization and other headers if needed - here
            GitHub required 'User-Agent'.
    
    2. The commits are returned in JSON format.

    3. We should get the next page URL from the 'Link' header of the response. It has a special
    format, so we use a regular expression for that.
        -   The next page URL may look like 'https://api.github.com/repositories/93253246/commits?page=2'. It's
            generated by GitHub itself.

    4. Then we yield the received commits one by one, and when they are finished, the next 'while(url)'
    iteration will trigger, making one more request.
*/
async function* fetchCommits(repo) {
  let url = `https://api.github.com/repos/${repo}/commits`;

  while (url) {
    const response = await fetch(url, {
      // (1)
      headers: { "User-Agent": "Our script" }, // github needs any user-agent header
    });

    const body = await response.json(); // (2) response is JSON (array of commits)

    // (3) the URL of the next page is in the headers, extract it
    let nextPage = response.headers.get("Link").match(/<(.*?)>; rel="next"/);

    nextPage = nextPage?.[1];
    url = nextPage;

    for (let commit of body) {
      // (4) yield commits one by one, until the page ends
      yield commit;
    }
  }
}

// Usage
(async () => {
  let count = 0;

  for await (const commit of fetchCommits(
    "javascript-tutorial/en.javascript.info"
  )) {
    console.log(commit.author.login);
    if (++count == 100) {
      // let's stop at 100 commits
      break;
    }
  }
})();
// Note: If you are running this in an external sandbox, you'll need to paste here the function
